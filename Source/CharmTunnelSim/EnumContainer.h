


#pragma once

#include "EnumContainer.generated.h"


UENUM(BlueprintType)
enum IntersectionType 
{
	Right,
	Left,
	All,
	RightLeft,
};

UENUM(BlueprintType)
enum TunnelType 
{
	RightTunnel,
	LeftTunnel,
	StraightTunnel,
	StartTunnel
};

USTRUCT(Blueprintable)
struct FMeshSectionEnd 
{
	GENERATED_BODY()
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> GroundVertives;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> WallVertices;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector2D> GroundUV;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector2D> WallUV;

	void Reset() {
		GroundVertives.Empty();
		WallVertices.Empty();
	}
};

USTRUCT(Blueprintable)
struct FPointData
{
	GENERATED_BODY()

	float X;

	float Y;

	float Z;

	float intensity;
	//uint32 RGB;
};

USTRUCT(Blueprintable)
struct FRayData
{
	GENERATED_BODY()
	
	float X;

	float Y;

	float Z;
	
	float Range;
	
	float Velocity;
	
	float AzimuthAngle;

	float ElevationAngle;
};

USTRUCT(Blueprintable)
struct FLidarDescription
{
	GENERATED_BODY()

	/// Topic name where data will be published
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString topicName = "";

	/// Number of lasers.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 Channels = 32u;

	/// Measure distance in centimeters.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Range = 1000.0f;

	/// Points generated by all lasers per second.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 PointsPerSecond = 56000u;

	/// Lidar rotation frequency.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float RotationFrequency = 10.0f;

	/// Upper laser angle, counts from horizontal, positive values means above
	/// horizontal line.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float UpperFovLimit = 10.0f;

	/// Lower laser angle, counts from horizontal, negative values means under
	/// horizontal line.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float LowerFovLimit = -30.0f;

	/// Horizontal field of view
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float HorizontalFov = 360.0f;

	/// Attenuation Rate in the atmosphere in m^-1.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float AtmospAttenRate = 0.004f;

	/// Random seed for the noise/dropoff used by this sensor.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int RandomSeed = 0;

	/// General drop off rate.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float DropOffGenRate = 0.45f;

	/// General drop off rate.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float DropOffIntensityLimit = 0.8f;

	/// General drop off rate.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float DropOffAtZeroIntensity = 0.4f;

	/// Wether to show debug points of laser hits in simulator.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ShowDebugPoints = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float NoiseStdDev = 0.0f;
};

USTRUCT(Blueprintable)
struct FRadarDescription
{
	GENERATED_BODY()

	/// Topic name where data will be published
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString topicName = "";

	/// Point scanned per second.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 PointsPerSecond = 1500u;

	/// Vertical fov of radar.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float VerticalFOV = 30.0f;

	/// Horizontal fov of radar.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float HorizontalFOV = 30.0f;

	/// Range of radar.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Range = 1000.0f;
};


USTRUCT(Blueprintable)
struct FCameraDescription
{
	GENERATED_BODY()

	/// Topic name where data will be published
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString topicName = "";

	/// Horizontal resolution.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 resolutionX = 1024;

	/// Vertical resolution.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 resolutionY = 1024;

	/// Cameras field of view.
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float field_of_view = 90.0f;
};

